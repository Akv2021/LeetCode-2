class Solution {
public:
    
    int upperBound(vector<int> arr, int k){
        int s = 0, e = arr.size() - 1;
        int ub = -1;
        while(s <= e){
            int mid = s + (e-s)/2;
            if(arr[mid] == k){
                ub = mid;
                s = mid + 1;
            }
            else if(arr[mid] < k)
                s = mid + 1;
            else
                e = mid - 1;
        }
       
        return ub;
    }
    
    int lowerBound(vector<int> arr, int k){
        int s = 0, e = arr.size() - 1;
        int lb = -1;
        while(s <= e){
            int mid = s + (e-s)/2;
            if(arr[mid] == k){
                lb = mid;
                e = mid - 1;
            }
            else if(arr[mid] < k)
                s = mid + 1;
            else
                e = mid - 1;
        }
       
        return lb;
    }
    
    vector<int> searchRange(vector<int>& nums, int target) {
        
        vector<int> ans;
        ans.push_back(lowerBound(nums, target));
        ans.push_back(upperBound(nums,target));
        
        return ans;
        
    }
};
